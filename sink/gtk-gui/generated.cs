// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic {
    
    
    internal class Gui {
        
        public static void Build(object obj, System.Type type) {
            Stetic.Gui.Build(obj, type.FullName);
        }
        
        public static void Build(object obj, string id) {
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            if ((id == "sink.help")) {
                Gtk.Dialog cobj = ((Gtk.Dialog)(obj));
                // Widget sink.help
                cobj.Title = "help";
                cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                cobj.HasSeparator = false;
                cobj.Events = ((Gdk.EventMask)(256));
                cobj.Name = "sink.help";
                // Internal child sink.help.VBox
                Gtk.VBox w1 = cobj.VBox;
                w1.BorderWidth = ((uint)(2));
                w1.Events = ((Gdk.EventMask)(256));
                w1.Name = "dialog_VBox";
                // Container child dialog_VBox.Gtk.Box+BoxChild
                Gtk.VBox w2 = new Gtk.VBox();
                w2.Events = ((Gdk.EventMask)(0));
                w2.Name = "vbox1";
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.Alignment w3 = new Gtk.Alignment(0.5F, 0.5F, 0F, 1F);
                w3.TopPadding = ((uint)(15));
                w3.BottomPadding = ((uint)(15));
                w3.Events = ((Gdk.EventMask)(0));
                w3.Name = "alignment1";
                // Container child alignment1.Gtk.Container+ContainerChild
                Gtk.HBox w4 = new Gtk.HBox();
                w4.Spacing = 15;
                w4.Events = ((Gdk.EventMask)(0));
                w4.Name = "hbox3";
                // Container child hbox3.Gtk.Box+BoxChild
                Gtk.Image w5 = new Gtk.Image();
                w5.Pixbuf = new Gdk.Pixbuf("sink.bmp");
                w5.Events = ((Gdk.EventMask)(0));
                w5.Name = "image5";
                bindings["image5"] = w5;
                w4.Add(w5);
                Gtk.Box.BoxChild w6 = ((Gtk.Box.BoxChild)(w4[w5]));
                w6.Position = 0;
                w6.Expand = false;
                w6.Fill = false;
                // Container child hbox3.Gtk.Box+BoxChild
                Gtk.Label w7 = new Gtk.Label();
                w7.LabelProp = "SINK";
                w7.UseUnderline = true;
                w7.Events = ((Gdk.EventMask)(0));
                w7.Name = "label4";
                bindings["label4"] = w7;
                w4.Add(w7);
                Gtk.Box.BoxChild w8 = ((Gtk.Box.BoxChild)(w4[w7]));
                w8.Position = 1;
                w8.Expand = false;
                w8.Fill = false;
                bindings["hbox3"] = w4;
                w3.Add(w4);
                bindings["alignment1"] = w3;
                w2.Add(w3);
                Gtk.Box.BoxChild w10 = ((Gtk.Box.BoxChild)(w2[w3]));
                w10.Position = 0;
                w10.Expand = false;
                w10.Fill = false;
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.ScrolledWindow w11 = new Gtk.ScrolledWindow();
                w11.VscrollbarPolicy = ((Gtk.PolicyType)(1));
                w11.HscrollbarPolicy = ((Gtk.PolicyType)(2));
                w11.CanFocus = true;
                w11.Events = ((Gdk.EventMask)(0));
                w11.Name = "scrolledwindow1";
                // Container child scrolledwindow1.Gtk.Container+ContainerChild
                Gtk.Viewport w12 = new Gtk.Viewport();
                w12.ShadowType = ((Gtk.ShadowType)(0));
                w12.Events = ((Gdk.EventMask)(0));
                w12.Name = "GtkViewport";
                // Container child GtkViewport.Gtk.Container+ContainerChild
                Gtk.ScrolledWindow w13 = new Gtk.ScrolledWindow();
                w13.VscrollbarPolicy = ((Gtk.PolicyType)(1));
                w13.HscrollbarPolicy = ((Gtk.PolicyType)(1));
                w13.CanFocus = true;
                w13.Events = ((Gdk.EventMask)(0));
                w13.Name = "scrolledwindow2";
                // Container child scrolledwindow2.Gtk.Container+ContainerChild
                Gtk.TextView w14 = new Gtk.TextView();
                w14.Buffer.Text = "Introduction\r\n\r\nCellular automaton consist of an infinite number of cells, which have a finite number of states. These states change depending on the state of their neighbours.  Each cell has the same rule for updating.\r\n\r\nSink\r\n\r\nIn this program, the cells can have two states: 0 or 1. This state depends on the state of their neighbours and the place where the cell is. \r\n\r\nThese are the default update rules:\r\n\r\n.  If both the cell and path are 1, and the cell has eight neighbours, the cell becomes 0. \r\n.  If the cell is 1, path is 0 and the cell has more than three neighbours, the cell changes to 0.\r\n.  If both the cell and path are 0, and the cell has more than three neighbours, the cell changes to 1.\r\n.  If the cell is 0, path is 1 and the cell has more than two neighbours, the cell becomes 1.\r\n\r\nThe user can change all the parameters of the program in the configuration menu.\r\n";
                w14.WrapMode = ((Gtk.WrapMode)(2));
                w14.Editable = false;
                w14.CanFocus = true;
                w14.Events = ((Gdk.EventMask)(0));
                w14.Name = "textview1";
                bindings["textview1"] = w14;
                w13.Add(w14);
                bindings["scrolledwindow2"] = w13;
                w12.Add(w13);
                bindings["GtkViewport"] = w12;
                w11.Add(w12);
                bindings["scrolledwindow1"] = w11;
                w2.Add(w11);
                Gtk.Box.BoxChild w18 = ((Gtk.Box.BoxChild)(w2[w11]));
                w18.Position = 1;
                bindings["vbox1"] = w2;
                w1.Add(w2);
                Gtk.Box.BoxChild w19 = ((Gtk.Box.BoxChild)(w1[w2]));
                w19.Position = 0;
                bindings["dialog_VBox"] = w1;
                // Internal child sink.help.ActionArea
                Gtk.HButtonBox w20 = cobj.ActionArea;
                w20.LayoutStyle = ((Gtk.ButtonBoxStyle)(4));
                w20.Spacing = 6;
                w20.BorderWidth = ((uint)(5));
                w20.Events = ((Gdk.EventMask)(256));
                w20.Name = "sink.help_ActionArea";
                // Container child sink.help_ActionArea.Gtk.ButtonBox+ButtonBoxChild
                Gtk.Button w21 = new Gtk.Button();
                w21.CanFocus = true;
                w21.Events = ((Gdk.EventMask)(0));
                w21.Name = "button3";
                w21.CanDefault = true;
                w21.Label = "OK";
                bindings["button3"] = w21;
                cobj.AddActionWidget(w21, 0);
                Gtk.ButtonBox.ButtonBoxChild w22 = ((Gtk.ButtonBox.ButtonBoxChild)(w20[w21]));
                w22.Expand = false;
                w22.Fill = false;
                bindings["sink.help_ActionArea"] = w20;
                cobj.DefaultWidth = 400;
                cobj.DefaultHeight = 449;
                bindings["sink.help"] = cobj;
                w5.Show();
                w7.Show();
                w4.Show();
                w3.Show();
                w14.Show();
                w13.Show();
                w12.Show();
                w11.Show();
                w2.Show();
                w1.Show();
                w21.Show();
                w20.Show();
                cobj.Show();
                w21.Released += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnButton3Released")));
            }
            else {
                if ((id == "sink.sinkgtk")) {
                    Gtk.Window cobj = ((Gtk.Window)(obj));
                    // Widget sink.sinkgtk
                    cobj.Title = "sinkgtk";
                    Gtk.UIManager w1 = new Gtk.UIManager();
                    Gtk.ActionGroup w2 = new Gtk.ActionGroup("Default");
                    Gtk.Action w3 = new Gtk.Action("Simulation", "Simulation", null, null);
                    w3.ShortLabel = "Start";
                    bindings["Simulation"] = w3;
                    w2.Add(w3, null);
                    Gtk.Action w4 = new Gtk.Action("NewSimulation", "New simulation", null, "gtk-media-play");
                    w4.ShortLabel = "New simulation";
                    bindings["NewSimulation"] = w4;
                    w2.Add(w4, null);
                    Gtk.ToggleAction w5 = new Gtk.ToggleAction("PauseSimulation", "Pause simulation", null, "gtk-media-pause");
                    w5.ShortLabel = "Pause simulation";
                    bindings["PauseSimulation"] = w5;
                    w2.Add(w5, null);
                    Gtk.Action w6 = new Gtk.Action("StopSimulation", "Stop simulation", null, "gtk-media-stop");
                    w6.ShortLabel = "Stop simulation";
                    bindings["StopSimulation"] = w6;
                    w2.Add(w6, null);
                    Gtk.Action w7 = new Gtk.Action("Exit", "Exit", null, "gtk-close");
                    w7.ShortLabel = "Exit";
                    bindings["Exit"] = w7;
                    w2.Add(w7, null);
                    Gtk.Action w8 = new Gtk.Action("Configuration", "Configuration", null, null);
                    w8.ShortLabel = "Configuration";
                    bindings["Configuration"] = w8;
                    w2.Add(w8, null);
                    Gtk.Action w9 = new Gtk.Action("IntroVariables", "Intro variables", null, "gtk-properties");
                    w9.ShortLabel = "Intro variables";
                    bindings["IntroVariables"] = w9;
                    w2.Add(w9, null);
                    Gtk.Action w10 = new Gtk.Action("Help", "Help", null, null);
                    w10.ShortLabel = "Help";
                    bindings["Help"] = w10;
                    w2.Add(w10, null);
                    Gtk.Action w11 = new Gtk.Action("Help1", "Help", null, "gtk-help");
                    w11.ShortLabel = "Help";
                    bindings["Help1"] = w11;
                    w2.Add(w11, null);
                    Gtk.Action w12 = new Gtk.Action("AboutAuthors", "About Authors", null, "gtk-info");
                    w12.ShortLabel = "About Authors";
                    bindings["AboutAuthors"] = w12;
                    w2.Add(w12, null);
                    w1.InsertActionGroup(w2, 0);
                    cobj.AddAccelGroup(w1.AccelGroup);
                    cobj.Icon = Gtk.IconTheme.Default.LoadIcon("stock_internet", 16, 0);
                    cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                    cobj.Events = ((Gdk.EventMask)(0));
                    cobj.Name = "sink.sinkgtk";
                    // Container child sink.sinkgtk.Gtk.Container+ContainerChild
                    Gtk.VBox w13 = new Gtk.VBox();
                    w13.Events = ((Gdk.EventMask)(0));
                    w13.Name = "vbox1";
                    // Container child vbox1.Gtk.Box+BoxChild
                    w1.AddUiFromString("<ui><menubar name='menubar1'><menu action='Simulation'><menuitem action='NewSimulation'/><menuitem action='PauseSimulation'/><menuitem action='StopSimulation'/><menuitem action='Exit'/></menu><menu action='Configuration'><menuitem action='IntroVariables'/></menu><menu action='Help'><menuitem action='Help1'/><menuitem action='AboutAuthors'/></menu></menubar></ui>");
                    Gtk.MenuBar w14 = ((Gtk.MenuBar)(w1.GetWidget("/menubar1")));
                    w14.Events = ((Gdk.EventMask)(0));
                    w14.Name = "menubar1";
                    bindings["menubar1"] = w14;
                    w13.Add(w14);
                    Gtk.Box.BoxChild w15 = ((Gtk.Box.BoxChild)(w13[w14]));
                    w15.Position = 0;
                    w15.Expand = false;
                    w15.Fill = false;
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.Statusbar w16 = new Gtk.Statusbar();
                    w16.Events = ((Gdk.EventMask)(0));
                    w16.Name = "statusbar1";
                    bindings["statusbar1"] = w16;
                    w13.Add(w16);
                    Gtk.Box.BoxChild w17 = ((Gtk.Box.BoxChild)(w13[w16]));
                    w17.Position = 1;
                    w17.Expand = false;
                    w17.Fill = false;
                    // Container child vbox1.Gtk.Box+BoxChild
                    Gtk.DrawingArea w18 = new Gtk.DrawingArea();
                    w18.Events = ((Gdk.EventMask)(0));
                    w18.Name = "drawingarea1";
                    bindings["drawingarea1"] = w18;
                    w13.Add(w18);
                    Gtk.Box.BoxChild w19 = ((Gtk.Box.BoxChild)(w13[w18]));
                    w19.Position = 2;
                    bindings["vbox1"] = w13;
                    cobj.Add(w13);
                    cobj.DefaultWidth = 500;
                    cobj.DefaultHeight = 300;
                    bindings["sink.sinkgtk"] = cobj;
                    w14.Show();
                    w16.Show();
                    w18.Show();
                    w13.Show();
                    cobj.Show();
                    cobj.Removed += ((Gtk.RemovedHandler)(System.Delegate.CreateDelegate(typeof(Gtk.RemovedHandler), cobj, "OnRemoved")));
                    w4.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnNewSimulationActivated")));
                    w5.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnPauseSimulationActivated")));
                    w6.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnStopSimulationActivated")));
                    w7.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnExitActivated")));
                    w9.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnIntroVariablesActivated")));
                    w11.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnHelp1Activated")));
                    w12.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnAboutAuthorsActivated")));
                    w18.ExposeEvent += ((Gtk.ExposeEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.ExposeEventHandler), cobj, "OnDrawingarea1ExposeEvent")));
                }
                else {
                    if ((id == "sink.configuration")) {
                        Gtk.Dialog cobj = ((Gtk.Dialog)(obj));
                        // Widget sink.configuration
                        cobj.Title = "configuration";
                        cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                        cobj.HasSeparator = false;
                        cobj.Events = ((Gdk.EventMask)(256));
                        cobj.Name = "sink.configuration";
                        // Internal child sink.configuration.VBox
                        Gtk.VBox w1 = cobj.VBox;
                        w1.BorderWidth = ((uint)(2));
                        w1.Events = ((Gdk.EventMask)(256));
                        w1.Name = "dialog_VBox";
                        // Container child dialog_VBox.Gtk.Box+BoxChild
                        Gtk.VBox w2 = new Gtk.VBox();
                        w2.Events = ((Gdk.EventMask)(0));
                        w2.Name = "vbox1";
                        // Container child vbox1.Gtk.Box+BoxChild
                        Gtk.Table w3 = new Gtk.Table(((uint)(5)), ((uint)(2)), false);
                        w3.Events = ((Gdk.EventMask)(0));
                        w3.Name = "table1";
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.Label w4 = new Gtk.Label();
                        w4.LabelProp = "Max cicles";
                        w4.Events = ((Gdk.EventMask)(0));
                        w4.Name = "label1";
                        bindings["label1"] = w4;
                        w3.Add(w4);
                        Gtk.Table.TableChild w5 = ((Gtk.Table.TableChild)(w3[w4]));
                        w5.YOptions = ((Gtk.AttachOptions)(4));
                        w5.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.Label w6 = new Gtk.Label();
                        w6.LabelProp = "Population";
                        w6.Events = ((Gdk.EventMask)(0));
                        w6.Name = "label3";
                        bindings["label3"] = w6;
                        w3.Add(w6);
                        Gtk.Table.TableChild w7 = ((Gtk.Table.TableChild)(w3[w6]));
                        w7.BottomAttach = ((uint)(2));
                        w7.TopAttach = ((uint)(1));
                        w7.YOptions = ((Gtk.AttachOptions)(4));
                        w7.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.Label w8 = new Gtk.Label();
                        w8.LabelProp = "Mortality";
                        w8.Events = ((Gdk.EventMask)(0));
                        w8.Name = "label4";
                        bindings["label4"] = w8;
                        w3.Add(w8);
                        Gtk.Table.TableChild w9 = ((Gtk.Table.TableChild)(w3[w8]));
                        w9.BottomAttach = ((uint)(3));
                        w9.TopAttach = ((uint)(2));
                        w9.YOptions = ((Gtk.AttachOptions)(4));
                        w9.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.Label w10 = new Gtk.Label();
                        w10.LabelProp = "Patch";
                        w10.Events = ((Gdk.EventMask)(0));
                        w10.Name = "label5";
                        bindings["label5"] = w10;
                        w3.Add(w10);
                        Gtk.Table.TableChild w11 = ((Gtk.Table.TableChild)(w3[w10]));
                        w11.BottomAttach = ((uint)(4));
                        w11.TopAttach = ((uint)(3));
                        w11.YOptions = ((Gtk.AttachOptions)(4));
                        w11.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.HScale w12 = new Gtk.HScale(null);
                        w12.Digits = 0;
                        w12.Adjustment.Upper = 100000;
                        w12.Adjustment.PageIncrement = 100;
                        w12.Adjustment.StepIncrement = 10;
                        w12.DrawValue = true;
                        w12.Adjustment.Value = 99900;
                        w12.ValuePos = ((Gtk.PositionType)(2));
                        w12.CanFocus = true;
                        w12.Events = ((Gdk.EventMask)(0));
                        w12.Name = "hscale1";
                        bindings["hscale1"] = w12;
                        w3.Add(w12);
                        Gtk.Table.TableChild w13 = ((Gtk.Table.TableChild)(w3[w12]));
                        w13.LeftAttach = ((uint)(1));
                        w13.RightAttach = ((uint)(2));
                        w13.YOptions = ((Gtk.AttachOptions)(4));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.HScale w14 = new Gtk.HScale(null);
                        w14.Digits = 0;
                        w14.Adjustment.Upper = 5000;
                        w14.Adjustment.PageIncrement = 10;
                        w14.Adjustment.StepIncrement = 1;
                        w14.DrawValue = true;
                        w14.ValuePos = ((Gtk.PositionType)(2));
                        w14.CanFocus = true;
                        w14.Events = ((Gdk.EventMask)(0));
                        w14.Name = "hscale2";
                        bindings["hscale2"] = w14;
                        w3.Add(w14);
                        Gtk.Table.TableChild w15 = ((Gtk.Table.TableChild)(w3[w14]));
                        w15.BottomAttach = ((uint)(2));
                        w15.LeftAttach = ((uint)(1));
                        w15.RightAttach = ((uint)(2));
                        w15.TopAttach = ((uint)(1));
                        w15.YOptions = ((Gtk.AttachOptions)(4));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.HScale w16 = new Gtk.HScale(null);
                        w16.Digits = 0;
                        w16.Adjustment.Upper = 10000;
                        w16.Adjustment.PageIncrement = 10;
                        w16.Adjustment.StepIncrement = 1;
                        w16.DrawValue = true;
                        w16.ValuePos = ((Gtk.PositionType)(2));
                        w16.CanFocus = true;
                        w16.Events = ((Gdk.EventMask)(0));
                        w16.Name = "hscale3";
                        bindings["hscale3"] = w16;
                        w3.Add(w16);
                        Gtk.Table.TableChild w17 = ((Gtk.Table.TableChild)(w3[w16]));
                        w17.BottomAttach = ((uint)(3));
                        w17.LeftAttach = ((uint)(1));
                        w17.RightAttach = ((uint)(2));
                        w17.TopAttach = ((uint)(2));
                        w17.YOptions = ((Gtk.AttachOptions)(4));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.HScale w18 = new Gtk.HScale(null);
                        w18.Digits = 0;
                        w18.Adjustment.Upper = 1000;
                        w18.Adjustment.PageIncrement = 10;
                        w18.Adjustment.StepIncrement = 1;
                        w18.DrawValue = true;
                        w18.ValuePos = ((Gtk.PositionType)(2));
                        w18.CanFocus = true;
                        w18.Events = ((Gdk.EventMask)(0));
                        w18.Name = "hscale4";
                        bindings["hscale4"] = w18;
                        w3.Add(w18);
                        Gtk.Table.TableChild w19 = ((Gtk.Table.TableChild)(w3[w18]));
                        w19.BottomAttach = ((uint)(4));
                        w19.LeftAttach = ((uint)(1));
                        w19.RightAttach = ((uint)(2));
                        w19.TopAttach = ((uint)(3));
                        w19.YOptions = ((Gtk.AttachOptions)(4));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.HScale w20 = new Gtk.HScale(null);
                        w20.Digits = 0;
                        w20.Adjustment.Upper = 300;
                        w20.Adjustment.PageIncrement = 10;
                        w20.Adjustment.StepIncrement = 1;
                        w20.DrawValue = true;
                        w20.Adjustment.Value = 60;
                        w20.ValuePos = ((Gtk.PositionType)(2));
                        w20.CanFocus = true;
                        w20.Events = ((Gdk.EventMask)(0));
                        w20.Name = "hscale5";
                        bindings["hscale5"] = w20;
                        w3.Add(w20);
                        Gtk.Table.TableChild w21 = ((Gtk.Table.TableChild)(w3[w20]));
                        w21.BottomAttach = ((uint)(5));
                        w21.LeftAttach = ((uint)(1));
                        w21.RightAttach = ((uint)(2));
                        w21.TopAttach = ((uint)(4));
                        w21.YOptions = ((Gtk.AttachOptions)(4));
                        // Container child table1.Gtk.Table+TableChild
                        Gtk.Label w22 = new Gtk.Label();
                        w22.LabelProp = "Size ";
                        w22.Events = ((Gdk.EventMask)(0));
                        w22.Name = "label7";
                        bindings["label7"] = w22;
                        w3.Add(w22);
                        Gtk.Table.TableChild w23 = ((Gtk.Table.TableChild)(w3[w22]));
                        w23.BottomAttach = ((uint)(5));
                        w23.TopAttach = ((uint)(4));
                        w23.YOptions = ((Gtk.AttachOptions)(4));
                        w23.XOptions = ((Gtk.AttachOptions)(4));
                        bindings["table1"] = w3;
                        w2.Add(w3);
                        Gtk.Box.BoxChild w24 = ((Gtk.Box.BoxChild)(w2[w3]));
                        w24.Position = 0;
                        w24.Expand = false;
                        w24.Fill = false;
                        // Container child vbox1.Gtk.Box+BoxChild
                        Gtk.Frame w25 = new Gtk.Frame();
                        w25.ShadowType = ((Gtk.ShadowType)(0));
                        w25.LabelXalign = 0F;
                        w25.Events = ((Gdk.EventMask)(0));
                        w25.Name = "frame2";
                        // Container child frame2.Gtk.Container+ContainerChild
                        Gtk.Alignment w26 = new Gtk.Alignment(0F, 0F, 1F, 1F);
                        w26.LeftPadding = ((uint)(12));
                        w26.Events = ((Gdk.EventMask)(0));
                        w26.Name = "GtkAlignment";
                        // Container child GtkAlignment.Gtk.Container+ContainerChild
                        Gtk.Table w27 = new Gtk.Table(((uint)(6)), ((uint)(3)), false);
                        w27.Events = ((Gdk.EventMask)(0));
                        w27.Name = "table2";
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.Label w28 = new Gtk.Label();
                        w28.LabelProp = "     Cell changes to 1 if:";
                        w28.Events = ((Gdk.EventMask)(0));
                        w28.Name = "label16";
                        bindings["label16"] = w28;
                        w27.Add(w28);
                        Gtk.Table.TableChild w29 = ((Gtk.Table.TableChild)(w27[w28]));
                        w29.BottomAttach = ((uint)(4));
                        w29.LeftAttach = ((uint)(1));
                        w29.RightAttach = ((uint)(2));
                        w29.TopAttach = ((uint)(3));
                        w29.YOptions = ((Gtk.AttachOptions)(4));
                        w29.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.Label w30 = new Gtk.Label();
                        w30.LabelProp = "                       Cell changes to 0 if:                 ";
                        w30.Events = ((Gdk.EventMask)(0));
                        w30.Name = "label2";
                        bindings["label2"] = w30;
                        w27.Add(w30);
                        Gtk.Table.TableChild w31 = ((Gtk.Table.TableChild)(w27[w30]));
                        w31.LeftAttach = ((uint)(1));
                        w31.RightAttach = ((uint)(2));
                        w31.YOptions = ((Gtk.AttachOptions)(4));
                        w31.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.Label w32 = new Gtk.Label();
                        w32.LabelProp = "If neighborhood is >=   ";
                        w32.Events = ((Gdk.EventMask)(0));
                        w32.Name = "label15";
                        bindings["label15"] = w32;
                        w27.Add(w32);
                        Gtk.Table.TableChild w33 = ((Gtk.Table.TableChild)(w27[w32]));
                        w33.BottomAttach = ((uint)(2));
                        w33.TopAttach = ((uint)(1));
                        w33.YOptions = ((Gtk.AttachOptions)(4));
                        w33.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.Label w34 = new Gtk.Label();
                        w34.LabelProp = "If neighborhood is >=   ";
                        w34.Events = ((Gdk.EventMask)(0));
                        w34.Name = "label11";
                        bindings["label11"] = w34;
                        w27.Add(w34);
                        Gtk.Table.TableChild w35 = ((Gtk.Table.TableChild)(w27[w34]));
                        w35.BottomAttach = ((uint)(3));
                        w35.TopAttach = ((uint)(2));
                        w35.YOptions = ((Gtk.AttachOptions)(4));
                        w35.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.Label w36 = new Gtk.Label();
                        w36.LabelProp = "If neighborhood is >=";
                        w36.Events = ((Gdk.EventMask)(0));
                        w36.Name = "label13";
                        bindings["label13"] = w36;
                        w27.Add(w36);
                        Gtk.Table.TableChild w37 = ((Gtk.Table.TableChild)(w27[w36]));
                        w37.BottomAttach = ((uint)(5));
                        w37.TopAttach = ((uint)(4));
                        w37.YOptions = ((Gtk.AttachOptions)(4));
                        w37.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.Label w38 = new Gtk.Label();
                        w38.LabelProp = "If neighborhood is >=";
                        w38.Events = ((Gdk.EventMask)(0));
                        w38.Name = "label14";
                        bindings["label14"] = w38;
                        w27.Add(w38);
                        Gtk.Table.TableChild w39 = ((Gtk.Table.TableChild)(w27[w38]));
                        w39.BottomAttach = ((uint)(6));
                        w39.TopAttach = ((uint)(5));
                        w39.YOptions = ((Gtk.AttachOptions)(4));
                        w39.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.Label w40 = new Gtk.Label();
                        w40.LabelProp = "and habitat = 1;  Or ...";
                        w40.Events = ((Gdk.EventMask)(0));
                        w40.Name = "label6";
                        bindings["label6"] = w40;
                        w27.Add(w40);
                        Gtk.Table.TableChild w41 = ((Gtk.Table.TableChild)(w27[w40]));
                        w41.BottomAttach = ((uint)(2));
                        w41.LeftAttach = ((uint)(2));
                        w41.RightAttach = ((uint)(3));
                        w41.TopAttach = ((uint)(1));
                        w41.YOptions = ((Gtk.AttachOptions)(4));
                        w41.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.Label w42 = new Gtk.Label();
                        w42.LabelProp = "and habitat = 0; ";
                        w42.Events = ((Gdk.EventMask)(0));
                        w42.Name = "label12";
                        bindings["label12"] = w42;
                        w27.Add(w42);
                        Gtk.Table.TableChild w43 = ((Gtk.Table.TableChild)(w27[w42]));
                        w43.BottomAttach = ((uint)(3));
                        w43.LeftAttach = ((uint)(2));
                        w43.RightAttach = ((uint)(3));
                        w43.TopAttach = ((uint)(2));
                        w43.YOptions = ((Gtk.AttachOptions)(4));
                        w43.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.Label w44 = new Gtk.Label();
                        w44.LabelProp = "and habitat = 1; Or...";
                        w44.Events = ((Gdk.EventMask)(0));
                        w44.Name = "label9";
                        bindings["label9"] = w44;
                        w27.Add(w44);
                        Gtk.Table.TableChild w45 = ((Gtk.Table.TableChild)(w27[w44]));
                        w45.BottomAttach = ((uint)(5));
                        w45.LeftAttach = ((uint)(2));
                        w45.RightAttach = ((uint)(3));
                        w45.TopAttach = ((uint)(4));
                        w45.YOptions = ((Gtk.AttachOptions)(4));
                        w45.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.Label w46 = new Gtk.Label();
                        w46.LabelProp = "and habitat = 0;";
                        w46.Events = ((Gdk.EventMask)(0));
                        w46.Name = "label10";
                        bindings["label10"] = w46;
                        w27.Add(w46);
                        Gtk.Table.TableChild w47 = ((Gtk.Table.TableChild)(w27[w46]));
                        w47.BottomAttach = ((uint)(6));
                        w47.LeftAttach = ((uint)(2));
                        w47.RightAttach = ((uint)(3));
                        w47.TopAttach = ((uint)(5));
                        w47.YOptions = ((Gtk.AttachOptions)(4));
                        w47.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.HScale w48 = new Gtk.HScale(null);
                        w48.Digits = 0;
                        w48.Adjustment.Upper = 8;
                        w48.Adjustment.PageIncrement = 1;
                        w48.Adjustment.StepIncrement = 1;
                        w48.DrawValue = true;
                        w48.Adjustment.Value = 8;
                        w48.ValuePos = ((Gtk.PositionType)(2));
                        w48.CanFocus = true;
                        w48.Events = ((Gdk.EventMask)(0));
                        w48.Name = "hscale7";
                        bindings["hscale7"] = w48;
                        w27.Add(w48);
                        Gtk.Table.TableChild w49 = ((Gtk.Table.TableChild)(w27[w48]));
                        w49.BottomAttach = ((uint)(2));
                        w49.LeftAttach = ((uint)(1));
                        w49.RightAttach = ((uint)(2));
                        w49.TopAttach = ((uint)(1));
                        w49.YOptions = ((Gtk.AttachOptions)(4));
                        w49.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.HScale w50 = new Gtk.HScale(null);
                        w50.Digits = 0;
                        w50.Adjustment.Upper = 8;
                        w50.Adjustment.PageIncrement = 1;
                        w50.Adjustment.StepIncrement = 1;
                        w50.DrawValue = true;
                        w50.ValuePos = ((Gtk.PositionType)(2));
                        w50.CanFocus = true;
                        w50.Events = ((Gdk.EventMask)(0));
                        w50.Name = "hscale8";
                        bindings["hscale8"] = w50;
                        w27.Add(w50);
                        Gtk.Table.TableChild w51 = ((Gtk.Table.TableChild)(w27[w50]));
                        w51.BottomAttach = ((uint)(3));
                        w51.LeftAttach = ((uint)(1));
                        w51.RightAttach = ((uint)(2));
                        w51.TopAttach = ((uint)(2));
                        w51.YOptions = ((Gtk.AttachOptions)(4));
                        w51.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.HScale w52 = new Gtk.HScale(null);
                        w52.Digits = 0;
                        w52.Adjustment.Upper = 8;
                        w52.Adjustment.PageIncrement = 1;
                        w52.Adjustment.StepIncrement = 1;
                        w52.DrawValue = true;
                        w52.Adjustment.Value = 8;
                        w52.ValuePos = ((Gtk.PositionType)(2));
                        w52.CanFocus = true;
                        w52.Events = ((Gdk.EventMask)(0));
                        w52.Name = "hscale9";
                        bindings["hscale9"] = w52;
                        w27.Add(w52);
                        Gtk.Table.TableChild w53 = ((Gtk.Table.TableChild)(w27[w52]));
                        w53.BottomAttach = ((uint)(5));
                        w53.LeftAttach = ((uint)(1));
                        w53.RightAttach = ((uint)(2));
                        w53.TopAttach = ((uint)(4));
                        w53.YOptions = ((Gtk.AttachOptions)(4));
                        w53.XOptions = ((Gtk.AttachOptions)(4));
                        // Container child table2.Gtk.Table+TableChild
                        Gtk.HScale w54 = new Gtk.HScale(null);
                        w54.Digits = 0;
                        w54.Adjustment.Upper = 8;
                        w54.Adjustment.PageIncrement = 1;
                        w54.Adjustment.StepIncrement = 1;
                        w54.DrawValue = true;
                        w54.Adjustment.Value = 3;
                        w54.ValuePos = ((Gtk.PositionType)(2));
                        w54.CanFocus = true;
                        w54.Events = ((Gdk.EventMask)(0));
                        w54.Name = "hscale10";
                        bindings["hscale10"] = w54;
                        w27.Add(w54);
                        Gtk.Table.TableChild w55 = ((Gtk.Table.TableChild)(w27[w54]));
                        w55.BottomAttach = ((uint)(6));
                        w55.LeftAttach = ((uint)(1));
                        w55.RightAttach = ((uint)(2));
                        w55.TopAttach = ((uint)(5));
                        w55.YOptions = ((Gtk.AttachOptions)(4));
                        w55.XOptions = ((Gtk.AttachOptions)(4));
                        bindings["table2"] = w27;
                        w26.Add(w27);
                        bindings["GtkAlignment"] = w26;
                        w25.Add(w26);
                        Gtk.Label w58 = new Gtk.Label();
                        w58.LabelProp = "<b>Internal variables:</b>";
                        w58.UseMarkup = true;
                        w58.Events = ((Gdk.EventMask)(256));
                        w58.Name = "GtkLabel1";
                        bindings["GtkLabel1"] = w58;
                        w25.LabelWidget = w58;
                        bindings["frame2"] = w25;
                        w2.Add(w25);
                        Gtk.Box.BoxChild w59 = ((Gtk.Box.BoxChild)(w2[w25]));
                        w59.Position = 1;
                        w59.Expand = false;
                        w59.Fill = false;
                        bindings["vbox1"] = w2;
                        w1.Add(w2);
                        Gtk.Box.BoxChild w60 = ((Gtk.Box.BoxChild)(w1[w2]));
                        w60.Position = 0;
                        w60.Expand = false;
                        w60.Fill = false;
                        bindings["dialog_VBox"] = w1;
                        // Internal child sink.configuration.ActionArea
                        Gtk.HButtonBox w61 = cobj.ActionArea;
                        w61.LayoutStyle = ((Gtk.ButtonBoxStyle)(4));
                        w61.Spacing = 6;
                        w61.BorderWidth = ((uint)(5));
                        w61.Events = ((Gdk.EventMask)(256));
                        w61.Name = "sink.configuration_ActionArea";
                        // Container child sink.configuration_ActionArea.Gtk.ButtonBox+ButtonBoxChild
                        Gtk.Button w62 = new Gtk.Button();
                        w62.CanFocus = true;
                        w62.Events = ((Gdk.EventMask)(0));
                        w62.Name = "button1";
                        w62.CanDefault = true;
                        w62.Label = "Save";
                        bindings["button1"] = w62;
                        cobj.AddActionWidget(w62, 0);
                        Gtk.ButtonBox.ButtonBoxChild w63 = ((Gtk.ButtonBox.ButtonBoxChild)(w61[w62]));
                        w63.Expand = false;
                        w63.Fill = false;
                        bindings["sink.configuration_ActionArea"] = w61;
                        cobj.DefaultWidth = 609;
                        cobj.DefaultHeight = 484;
                        bindings["sink.configuration"] = cobj;
                        w4.Show();
                        w6.Show();
                        w8.Show();
                        w10.Show();
                        w12.Show();
                        w14.Show();
                        w16.Show();
                        w18.Show();
                        w20.Show();
                        w22.Show();
                        w3.Show();
                        w28.Show();
                        w30.Show();
                        w32.Show();
                        w34.Show();
                        w36.Show();
                        w38.Show();
                        w40.Show();
                        w42.Show();
                        w44.Show();
                        w46.Show();
                        w48.Show();
                        w50.Show();
                        w52.Show();
                        w54.Show();
                        w27.Show();
                        w26.Show();
                        w58.Show();
                        w25.Show();
                        w2.Show();
                        w1.Show();
                        w62.Show();
                        w61.Show();
                        cobj.Show();
                        w62.Released += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnButton1Released")));
                    }
                }
            }
            System.Reflection.FieldInfo[] fields = obj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(obj, widget);
                }
            }
        }
    }
    
    internal class ActionGroups {
        
        public static Gtk.ActionGroup GetActionGroup(System.Type type) {
            return Stetic.ActionGroups.GetActionGroup(type.FullName);
        }
        
        public static Gtk.ActionGroup GetActionGroup(string name) {
            return null;
        }
    }
}
